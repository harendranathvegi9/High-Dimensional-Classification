clear all; close all;
runExperiments = 1;
%Todo: make sure data is z-scored
%figure out how to automatically select which lambda value to use in glmnet
paths = getLocalPaths();
addpath(paths.matlab);
addpath(paths.glmnet);
outdatadir = paths.outdatadir;

[all_lab all] = load_uci(paths.data);
all_lab = all_lab + 1;
%partition into train and test
r = randperm(length(all_lab));
all = all(r,:);
all_lab = all_lab(r);
xTrain = all(1:4000,:);
yTrain = all_lab(1:4000,:);
xTest = all(4001:end,:);
yTest = all_lab(4001:end,:);

numfolds = 10;
noreduce = @deal;
PCA = @pca;

c = cvpartition(all_lab,'k',numfolds);
classifiers =        struct('svm',struct('function',@libsvmWrapper,'reduce',noreduce,'options', '-t 0'), ...
                     'ridge',struct('function',@glmnetWrapper,'reduce',noreduce,'options', struct('family','binomial','alpha',0,'type','')),...
                     'lasso',struct('function',@glmnetWrapper,'reduce',noreduce,'options', struct('family','binomial','alpha',1,'type','')),...
                     'elnet',struct('function',@glmnetWrapper,'reduce',noreduce,'options', struct('family','binomial','alpha',.5,'type','')),...
                     'naivebayes_nosmooth',  struct('function',@naiveBayesWrapper,'reduce',noreduce,'options', 'diagLinear'),...
                     'naivebayes_nosmooth_pca',  struct('function',@naiveBayesWrapper,'reduce',PCA,'options', 'diagLinear'),...
                     'lasso_pca',struct('function',@glmnetWrapper,'reduce',PCA,'options', struct('family','binomial','alpha',1,'type','')),...
                    'quad_analysis',struct('function',@matlabclassifierWrapper,'reduce',noreduce,'options', 'diagLinear'));


%Techniques = {'naivebayes_nosmooth_pca','lasso_pca'};
Techniques = {'naivebayes_nosmooth'};

%Techniques = {'naivebayes_nosmooth','svm','ridge','lasso'};
nT = length(Techniques);
rate = zeros(1,nT);
%train_set_sizes = [23 1200 ];

train_set_sizes = floor(linspace(1000,4000,10));%[1000 1200 1500 2000 2300 2700 3000];
if(runExperiments == 1)
for train_set_size = train_set_sizes
for Ti = 1:nT
    technique = Techniques{Ti};
    disp(['using technique: ' technique]);
    T = getfield(classifiers,technique);
    classifier = T.function;
    options = T.options;
    reduce = T.reduce;
    out = zeros(1,numfolds);
    for i = 1:numfolds
        out(i) = subsample_and_reduce_and_classify(train_set_size,classifier,reduce,xTrain,yTrain,xTest,yTest,options);
    end

    savefile = [outdatadir technique '.' int2str(train_set_size) '.mat'];
    save(savefile,'out');
end
end
end
nT = length(Techniques);
data = zeros(nT,length(train_set_sizes),numfolds);
for ii = 1:length(train_set_sizes);
    train_set_size = train_set_sizes(ii);
    for Ti = 1:nT
        technique = Techniques{Ti};
        infile = [outdatadir technique '.' int2str(train_set_size) '.mat'];
        S = load(infile);
        data(Ti,ii,:) = S.out;
    end
end
figure(1);
colors = {'red','blue','green','brown','black','yellow','purple','cyan'};
hold on;
for Ti = 1:nT
    E = std(data(Ti,:,:),0,3);
    M = mean(data(Ti,:,:),3);
    errorbar(train_set_sizes,M,E,'color',colors{Ti})
end
hold off;
